%% File : model.tlc
%% Created : Wed Apr 03 22:02:43 2024
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "model.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  model "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign intType = LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)
    %assign real32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "model_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void model_Outputs_wrapper_accel(const %<real32Type> *u,
			const %<real32Type> *delta,
			const %<real32Type> *psi,
			%<real32Type> *xdot,
			%<real32Type> *ydot,
			%<real32Type> *psidot,
			const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "model_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void model_Start_wrapper(const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);
    extern void model_Outputs_wrapper(const %<real32Type> *u,
			const %<real32Type> *delta,
			const %<real32Type> *psi,
			%<real32Type> *xdot,
			%<real32Type> *ydot,
			%<real32Type> *psidot,
			const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);
    extern void model_Terminate_wrapper(const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);
    void model_Outputs_wrapper_accel(const %<real32Type> *u,
			const %<real32Type> *delta,
			const %<real32Type> *psi,
			%<real32Type> *xdot,
			%<real32Type> *ydot,
			%<real32Type> *psidot,
			const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1){
    model_Outputs_wrapper(u,
			delta,
			psi,
			xdot,
			ydot,
			psidot,
			L1, p_width0,
			L2, p_width1);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void model_Start_wrapper(const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);

    SFB_EXTERN_C void model_Outputs_wrapper(const %<real32Type> *u,
			const %<real32Type> *delta,
			const %<real32Type> *psi,
			%<real32Type> *xdot,
			%<real32Type> *ydot,
			%<real32Type> *psidot,
			const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);

    SFB_EXTERN_C void model_Terminate_wrapper(const %<real32Type> *L1, const %<intType> p_width0,
			const %<real32Type> *L2, const %<intType> p_width1);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    model_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %else
    model_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %endif

  %%
%endfunction


%% [EOF] model.tlc

